<?php

namespace {{ namespace }};

{% for use in uses %}
use {{ use }};
{% endfor %}

/**
{% for annotation in classAnnotations %}
 * {{ annotation|raw }}
{% endfor %}
*/
class {{ classname }}{% if parent != '' %} extends {{ parent }} {% endif %}

{
{% for field in fields %}

    /**
     * @var {{ field.type }}|null
{% for annotation in field.annotations %}
     * {{ annotation|raw }}
{% endfor %}
     */
    protected ?{{ field.type }} ${{ field.name }}{% if field.defaultValue != null %} = {{ field.defaultValue }}{% endif %};
{% endfor %}

{% if __construct.fields is not empty %}
    /**
     * {{ classname }} constructor.
     */
    public function __construct()
    {
{% if parent != '' %}
        parent::__construct();
{% endif %}
{% for field in __construct.fields %}
{% if field.entityType == 'Collection' %}
        $this->{{ field.name }} = new ArrayCollection();
{% endif %}
{% if field.entityType == 'uuid' %}
    $this->{{ field.name }} = Uuid::uuid4();
{% endif %}
{% endfor %}
    }
{% endif %}
{% for field in fields %}

    /**
     * @return {{ field.type }}|null
     */
    public function {{ field.getter }}(): ?{{ field.type }}
    {
        return $this->{{ field.name }};
    }

{% if field.adder != '' %}
    /**
     * @param array ${{ field.name }}
     */
    public function {{ field.setter }}(array ${{ field.name }}): void
    {
        $this->{{ field.name }} = new ArrayCollection();
        if (null !== ${{ field.name }}) {
            foreach (${{ field.name }} as $entity) {
                $this->{{ field.adder }}($entity);
            }
        }
    }

    /**
     * @param {{ field.entityClassName }} ${{ field.entityVarName }}
     *
     * @return {{ classname }}
     */
    public function {{ field.adder }}({{ field.entityClassName }} ${{ field.entityVarName }}): {{ classname }}
    {
        // ${{ field.entityVarName }}->set{{ classname }}($this); TODO remove or uncomment
        $this->{{ field.name }}->add(${{ field.entityVarName }});

        return $this;
    }
{% else %}
    /**
     * @param {{ field.type }}|null ${{ field.name }}
     */
    public function {{ field.setter }}({{ field.type }} ${{ field.name }} = null): void
    {
        $this->{{ field.name }} = ${{ field.name }};
    }
{% endif %}
{% if field.remover != '' %}

    /**
     * @param {{ field.entityClassName }} ${{ field.entityVarName }}
     *
     * @return {{ classname }}
     */
    public function {{ field.remover }}({{ field.entityClassName }} ${{ field.entityVarName }}): {{ classname }}
    {
        $this->{{ field.name }}->removeElement(${{ field.entityVarName }});

        return $this;
    }
{% endif %}
{% endfor %}

}