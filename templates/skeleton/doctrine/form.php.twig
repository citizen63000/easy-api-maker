<?php

namespace {{ namespace }};

use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints as Assert;

{% for use in uses %}
use {{ use }};
{% endfor %}

class {{ classname }}Type {% if parent != '' %}extends {{ parent }} {% endif %}

{
    protected static $dataClass = {{ classname }}::class;

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
{% if parent != '' %}
        parent::buildForm($builder, $options);
{% endif %}

{% if fields %}
        $builder
{% for field in fields %}
            ->add(
                '{{ field.name }}',
                {{ field.type }}::class,
                [
{% if field.required %}
                    'required' => true,
{% else %}
                    'required' => false,
{% endif %}
{% if field.type == 'DateType' %}
                    'widget' => 'single_text',
                    'format' => 'yyyy-MM-dd',
{% elseif field.type == 'EntityType' %}
                    'class' => {{ field.class }}::class,
{% if field.relationType == 'manyToMany' %}
                    'multiple' => true,
                    'by_reference' => false,
{% endif %}
{% elseif field.type == 'ChoiceType' and field.originalType == 'boolean' %}
                    'choices' => [0, 1,],
{% if field.isReferential %}
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('r')
                            ->addOrderBy("r.rank", 'ASC')
                            ->addOrderBy("r.name", 'ASC');
                    },
{% endif %}
{% if field.relationType == 'manyToMany' %}
                    'multiple' => true,
                    'by_reference' => false,
{% endif %}
{% elseif field.type == 'CollectionType' %}
                    'entry_type' => {{ field.class }}::class,
                    'allow_add' => true,
                    'allow_delete' => true,
                    'allow_extra_fields' => true,
                    'by_reference' => false,
{% endif %}
                    'constraints' => [
{% if field.required %}
                        new Assert\NotBlank(),
{% endif %}
                    ],
                ]
            )
{% endfor %}
        ;
{% endif %}
    }
}